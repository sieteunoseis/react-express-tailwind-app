name: Build and Push Docker Images

on:
  push:
    branches: [ main, security-stability-improvements ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [frontend, backend]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  test-docker:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Test Docker deployment
      run: |
        cd docker
        # Copy .env from root directory if it doesn't exist
        if [ ! -f .env ]; then
          cp ../.env .env
        fi
        cp .env .env.test
        # Use the images we just built
        export FRONTEND_TAG=${{ github.sha }}
        export BACKEND_TAG=${{ github.sha }}
        
        # Start services
        docker-compose up -d
        
        # Wait for services
        sleep 30
        
        # Get the backend port from .env
        BACKEND_PORT=$(grep "^PORT=" .env 2>/dev/null | cut -d'=' -f2 || echo "3001")
        
        # Test backend health endpoint directly
        curl -f http://localhost:${BACKEND_PORT}/health || exit 1
        
        # Test API through backend
        curl -f http://localhost:${BACKEND_PORT}/api/data || exit 1
        
        # Cleanup
        docker-compose down